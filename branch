#!/bin/rc -e

rfork en

fn usage{
	echo usage: $0 '[-b base] [-o origin] new
	-b base:	use "base" for branch (default: current branch)
	-o origin:	use "origin" for remote branch
	-u:		update branch if it exists
	new:	name of new branch' >[1=2]
	exit usage
}

if(! cd `{git/conf -r}){
	exit 'not in git repository'
	exit notgit
}
git/fs

nl='
'
stay=()
create=()
update=()
base=`{awk '$1=="branch"{print $2}' < /mnt/git/ctl}
while(~ $1 -* && ! ~ $1 --){
	switch($1){
	case -c; create=true
	case -s; stay=true
	case -b; shift; base=$1
	case -u; update=true
	case *
		usage
	}
	shift
}
if(~ $1 --) shift

if(~ $#* 0){
	echo $base
	exit
}

if(! ~ $#* 1)
	usage
if(~ $1 refs/heads/*)
	new=$1
if not if(~ $1 heads/*)
	new=refs/$1
if not
	new=refs/heads/$1

if(! git/walk -q `{git/query -c HEAD $base | sed 's/^..//g'}){
	echo remote changes would clobber local changes >[1=2]
	exit dirty
}

if(~ $#create 0){
	if(! test -e .git/$new){
		echo branch $new: does not exist >[1=2]
		exit noexist
	}
}
if not{
	if(~ $#update 0 && test -e .git/$new){
		echo could not create $1: already exists >[1=2]
		exit exists
	}
	branched=()
	remotes=`$nl{cd .git/refs/remotes && ls}
	candidates=(.git/refs/$base .git/refs/heads/$base .git/refs/remotes/$base .git/refs/remotes/$remotes/$base)
	for(br in $candidates){
		if(~ $#branched 0 && test -f $br){
			cp $br .git/$new
			branched=true
		}
	}
	if(~ $#branched 0){
		echo 'could not find branch '$base >[1=2]
		exit notfound
	}
}

modified=`$nl{git/query -c $new $base | grep '^[+~]' | sed 's/^..//'}
deleted=`$nl{git/query -c $new $base | grep '^-' | sed 's/^..//'}

if(! ~ $#stay 0)
	exit

if(! ~ $#modified 0){
	basedir=`{git/query -p $base}
	# Modifications can turn a file into
	# a directory, so we need to walk to
	# check the blobs out correctly.
	for(m in $modified){
		if(test -f $basedir/tree/$m){
			d=`{basename -d $m}
			mkdir -p $d
			mkdir -p .git/index9/tracked/$d
			cp  $basedir/tree/$m $m
			walk -eq $m > .git/index9/tracked/$m
		}
	}
}
if(! ~ $#deleted 0){
	rm -f $deleted
	rm -f .git/index9/tracked/$deleted
}

echo ref: $new > .git/HEAD
